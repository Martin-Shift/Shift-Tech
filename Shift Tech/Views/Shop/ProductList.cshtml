@model Shift_Tech.ViewModels.ProductListViewModel;
@{
    Layout = "_Layout";
    ViewData["Title"] = "Product List";
    var isAdmin = User.IsInRole("admin");
    var products = Model.Products as List<Product>;
    var visibleProducts = products.Skip((Model.Filter.CurrentPage - 1) * 9).Take(9).ToList();
    var minproduct = Model.Filter.StartPrice;
    var maxproduct = Model.Filter.EndPrice;

}
@using Shift_Tech.DbModels
@section styles {
    <style>
        .full-card {
            width: 100%;
            height: 100%;
        }

        .range_container {
            display: flex;
            flex-direction: column;
            width: 80%;
            margin: 100px auto;
        }

        .sliders_control {
            position: relative;
            min-height: 50px;
        }

        .form_control {
            position: relative;
            display: flex;
            justify-content: space-between;
            font-size: 24px;
            color: #635a5a;
        }

        input[type=range]::-webkit-slider-thumb {
            -webkit-appearance: none;
            pointer-events: all;
            width: 24px;
            height: 24px;
            background-color: #fff;
            border-radius: 50%;
            box-shadow: 0 0 0 1px #C6C6C6;
            cursor: pointer;
        }

        input[type=range]::-moz-range-thumb {
            -webkit-appearance: none;
            pointer-events: all;
            width: 24px;
            height: 24px;
            background-color: #fff;
            border-radius: 50%;
            box-shadow: 0 0 0 1px #C6C6C6;
            cursor: pointer;
        }

        input[type=range]::-webkit-slider-thumb:hover {
            background: #f7f7f7;
        }

        input[type=range]::-webkit-slider-thumb:active {
            box-shadow: inset 0 0 3px #387bbe, 0 0 9px #387bbe;
            -webkit-box-shadow: inset 0 0 3px #387bbe, 0 0 9px #387bbe;
        }

        input[type="number"] {
            color: #8a8383;
            width: auto;
            height: 30px;
            font-size: 20px;
            border: none;
        }

        input[type=number]::-webkit-inner-spin-button,
        input[type=number]::-webkit-outer-spin-button {
            opacity: 1;
        }

        input[type="range"] {
            -webkit-appearance: none;
            appearance: none;
            height: 2px;
            width: 100%;
            position: absolute;
            background-color: #C6C6C6;
            pointer-events: none;
        }

        #fromSlider {
            height: 0;
            z-index: 1;
        }
    </style>
}
@section header {

}


<body>
    <div class="container-fluid">
        <div class="row px-xl-5">
            <div class="col-lg-3 col-md-4">
                <h5 class="section-title position-relative text-uppercase mb-3"><span class="bg-secondary pr-3">Filter by price</span></h5>
                <div class="range_container">
                    <div class="sliders_control">
                        <input id="fromSlider" type="range" value="@minproduct" min="@minproduct" max="@maxproduct" />
                        <input id="toSlider" type="range" value="@maxproduct" min="@minproduct" max="@maxproduct" />
                    </div>
                    <div class="form_control">
                        <div class="form_control_container">
                            <div class="form_control_container__time">Min</div>
                            <input class="form_control_container__time__input" type="number" id="fromInput" value="@minproduct" min="@minproduct" max="@maxproduct" />
                        </div>
                        <div class="form_control_container">
                            <div class="form_control_container__time">Max</div>
                            <input class="form_control_container__time__input" type="number" id="toInput" value="@maxproduct" min="@minproduct" max="@maxproduct" />
                        </div>
                    </div>
                </div>
                <h5 class="section-title position-relative text-uppercase mb-3"><span class="bg-secondary pr-3">Filter by Categories</span></h5>
                @foreach (Category category in Model.Categories)
                {
                    <div class="bg-light p-4 mb-30">
                        <form>
                            <div class="custom-control custom-checkbox d-flex align-items-center justify-content-between mb-3">
                                <input type="checkbox" class="custom-control-input" data-id="@category.Id" id="selected-category">
                                <label class="custom-control-label" for="selected-category">@category.Name</label>
                                <span class="badge border font-weight-normal">@products.Where(x=> x.Category == category).Count()</span>
                            </div>
                        </form>
                    </div>
                }
            </div>
            <div class="col-lg-9 col-md-8">
                <div class="row pb-3">
                    <div class="col-12 pb-1">
                        <div class="d-flex align-items-center justify-content-between mb-4">
                            <div class="ml-2">
                                <div class="btn-group">
                                    <button type="button" class="btn btn-sm btn-light dropdown-toggle" data-toggle="dropdown">Sorting</button>
                                    <div class="dropdown-menu dropdown-menu-right">
                                        <a class="dropdown-item" href="#">Latest</a>
                                        <a class="dropdown-item" href="#">Popularity</a>
                                        <a class="dropdown-item" href="#">Best Rating</a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    @foreach (Product product in visibleProducts)
                    {
                        var avg = product.Reviews.Count == 0 ? 0 : product.Reviews.Average(x => x.Rating);
                        <div class="col-lg-4 col-md-6 col-sm-6 pb-1">
                            <div class="  justify-content-center product-item bg-light mb-4">
                                <div class="justify-content-center product-img position-relative overflow-hidden d-flex align-items-center">
                                    <img class="img-fluid w-100" src="@product.MainImage?.Url()" alt="">
                                    <div class="product-action">
                                        <a class="btn btn-outline-dark btn-square add-to-cart-button" onclick="addToCart(@product.Id)"><i class="fa fa-shopping-cart"></i></a>
                                        <a class="btn btn-outline-dark btn-square" href="@Url.Action("ProductDetail", "Shop", new { id = product.Id })"><i class="fa fa-search"></i></a>
                                    </div>
                                </div>
                                <div class="text-center py-4">
                                    <a class="h6 text-decoration-none text-truncate" href="">@product.Name</a>
                                    <div class="d-flex align-items-center justify-content-center mt-2">
                                        <h5>$@product.Price</h5>
                                        @if (product.Price != product.PreviousPrice)
                                        {
                                            <h6 class="text-muted ml-2"><del>$@product.PreviousPrice</del></h6>
                                        }
                                    </div>
                                    <div class="d-flex align-items-center justify-content-center mb-1">
                                        @for (int i = 0; i < Convert.ToInt32(avg); i++)
                                        {
                                            <small class="fa fa-star text-primary mr-1"></small>
                                        }
                                        @if (avg % 1 >= 0.4)
                                        {
                                            <small class="fa fa-star-half-alt text-primary mr-1"></small>
                                        }
                                        @if (avg % 1 < 0.4 && avg != 0)
                                        {
                                            <small class="far fa-star text-primary mr-1"></small>
                                        }
                                        @for (int i = 0; i < Convert.ToInt32(5 - avg); i++)
                                        {
                                            <small class="far fa-star text-primary mr-1"></small>
                                        }
                                        <small>(@product.Reviews.Count)</small>
                                    </div>
                                </div>
                            </div>

                        </div>
                    }
                    <div class="col-12">
                        <nav>
                            <ul class="pagination justify-content-center">
                                <li class="page-item disabled"><a class="page-link" href="#">Previous</span></a></li>
                                <li class="page-item active"><a class="page-link" href="#">1</a></li>
                                <li class="page-item"><a class="page-link" href="#">2</a></li>
                                <li class="page-item"><a class="page-link" href="#">3</a></li>
                                <li class="page-item"><a class="page-link" href="#">Next</a></li>
                            </ul>
                        </nav>
                    </div>

                </div>
            </div>
        </div>
    </div>
    <a href="#" class="btn btn-primary back-to-top"><i class="fa fa-angle-double-up"></i></a>
</body>


@section footer {

}
@section Scripts {
    <script>
        function addToCart(productId) {
            const productCount = 1;

            fetch("/Shop/AddToCart", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(
                    {
                        productId: productId,
                        productAmount: productCount
                    })
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error("Network response was not ok");
                    }
                    return response.json();
                })
                .then(data => {
                    document.getElementById("cartItemCount").textContent = data.cartItemCount;
                })
                .catch(error => {
                    console.error("Fetch error:", error);
                });
        }

        function controlFromInput(fromSlider, fromInput, toInput, controlSlider) {
            const [from, to] = getParsed(fromInput, toInput);
            fillSlider(fromInput, toInput, '#C6C6C6', '#25daa5', controlSlider);
            if (from > to) {
                fromSlider.value = to;
                fromInput.value = to;
            } else {
                fromSlider.value = from;
            }
        }

        function controlToInput(toSlider, fromInput, toInput, controlSlider) {
            const [from, to] = getParsed(fromInput, toInput);
            fillSlider(fromInput, toInput, '#C6C6C6', '#25daa5', controlSlider);
            setToggleAccessible(toInput);
            if (from <= to) {
                toSlider.value = to;
                toInput.value = to;
            } else {
                toInput.value = from;
            }
        }

        function controlFromSlider(fromSlider, toSlider, fromInput) {
            const [from, to] = getParsed(fromSlider, toSlider);
            fillSlider(fromSlider, toSlider, '#C6C6C6', '#25daa5', toSlider);
            if (from > to) {
                fromSlider.value = to;
                fromInput.value = to;
            } else {
                fromInput.value = from;
            }
        }

        function controlToSlider(fromSlider, toSlider, toInput) {
            const [from, to] = getParsed(fromSlider, toSlider);
            fillSlider(fromSlider, toSlider, '#C6C6C6', '#25daa5', toSlider);
            setToggleAccessible(toSlider);
            if (from <= to) {
                toSlider.value = to;
                toInput.value = to;
            } else {
                toInput.value = from;
                toSlider.value = from;
            }
        }

        function getParsed(currentFrom, currentTo) {
            const from = parseInt(currentFrom.value, 10);
            const to = parseInt(currentTo.value, 10);
            return [from, to];
        }

        function fillSlider(from, to, sliderColor, rangeColor, controlSlider) {
            const rangeDistance = to.max - to.min;
            const fromPosition = from.value - to.min;
            const toPosition = to.value - to.min;
            controlSlider.style.background = `linear-gradient(
                      to right,
                      ${sliderColor} 0%,
                      ${sliderColor} ${(fromPosition) / (rangeDistance) * 100}%,
                      ${rangeColor} ${((fromPosition) / (rangeDistance)) * 100}%,
                      ${rangeColor} ${(toPosition) / (rangeDistance) * 100}%,
                      ${sliderColor} ${(toPosition) / (rangeDistance) * 100}%,
                      ${sliderColor} 100%)`;
        }

        function setToggleAccessible(currentTarget) {
            const toSlider = document.querySelector('#toSlider');
            if (Number(currentTarget.value) <= 0) {
                toSlider.style.zIndex = 2;
            } else {
                toSlider.style.zIndex = 0;
            }
        }

        const fromSlider = document.querySelector('#fromSlider');
        const toSlider = document.querySelector('#toSlider');
        const fromInput = document.querySelector('#fromInput');
        const toInput = document.querySelector('#toInput');
        fillSlider(fromSlider, toSlider, '#C6C6C6', '#25daa5', toSlider);
        setToggleAccessible(toSlider);

        fromSlider.oninput = () => controlFromSlider(fromSlider, toSlider, fromInput);
        toSlider.oninput = () => controlToSlider(fromSlider, toSlider, toInput);
        fromInput.oninput = () => controlFromInput(fromSlider, fromInput, toInput, toSlider);
        toInput.oninput = () => controlToInput(toSlider, fromInput, toInput, toSlider);

    </script>
}
